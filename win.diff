diff --git a/CPPHEADER b/CPPHEADER
old mode 100644
new mode 100755
diff --git a/LICENSE b/LICENSE
old mode 100644
new mode 100755
diff --git a/LICENSE.LGPL b/LICENSE.LGPL
old mode 100644
new mode 100755
diff --git a/README b/README
old mode 100644
new mode 100755
index 3b6cbfd..9372280
--- a/README
+++ b/README
@@ -35,3 +35,7 @@ Roll back:
     $ git checkout A2 -- .  
     $ git commit -m 'going back to A2'
 
+
+http://www.codebreakers-journal.com/downloads/cbj/2006/CBM_1_2_2006_Nigurrath_Loaders_for_DLLs.pdf
+http://msdn.microsoft.com/en-us/library/7k30y2k5.aspx
+http://www.codeproject.com/KB/system/hooksys.aspx
\ No newline at end of file
diff --git a/bin/conf b/bin/conf
old mode 100644
new mode 100755
diff --git a/globinclude.pri b/globinclude.pri
old mode 100644
new mode 100755
diff --git a/images/bad.svg b/images/bad.svg
old mode 100644
new mode 100755
diff --git a/images/globresources.pri b/images/globresources.pri
old mode 100644
new mode 100755
diff --git a/images/lib.qrc b/images/lib.qrc
old mode 100644
new mode 100755
diff --git a/martex/libqtload/filter.cpp b/martex/libqtload/filter.cpp
old mode 100644
new mode 100755
index 37f3c50..1c621af
--- a/martex/libqtload/filter.cpp
+++ b/martex/libqtload/filter.cpp
@@ -20,6 +20,13 @@ int message()
 filter::filter()
 {
 	QSpyWidget::instance()->setObject(0);
+//	QSpyWidget::instance()->moveToThread(QCoreApplication::instance()->thread());
+	//QSpyWidget::instance()->setParent(this);
+	this->moveToThread(QCoreApplication::instance()->thread());
+
+	connect(this, SIGNAL(objChanged(QObject *)),
+			QSpyWidget::instance(), SLOT(setObject(QObject *)), Qt::QueuedConnection);
+
 }
 
 bool filter::eventFilter(QObject *obj, QEvent *event)
@@ -41,8 +48,8 @@ bool filter::eventFilter(QObject *obj, QEvent *event)
 	{
 //		QMouseEvent *keyEvent = static_cast<QMouseEvent *>(event);
 //		qDebug("Mouse pres %d", keyEvent->pos().x());
-		QSpyWidget::instance()->setObject(obj);
-		//QSpyWidget::instance()->show();
+		//QSpyWidget::instance()->setObject(obj);
+		emit objChanged(obj);
 		return false;
 	}
 	if (event->type() == QEvent::Show)
diff --git a/martex/libqtload/filter.h b/martex/libqtload/filter.h
old mode 100644
new mode 100755
index 1b79a8e..80e25e7
--- a/martex/libqtload/filter.h
+++ b/martex/libqtload/filter.h
@@ -6,6 +6,10 @@
 
 #include <QKeyEvent>
 
+#include <windows.h> 
+__declspec( dllexport ) void Proc();
+LRESULT __declspec(dllexport) CALLBACK GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam);
+
 class filter : public QObject
 {
 	Q_OBJECT
@@ -13,6 +17,9 @@ class filter : public QObject
 public:
 	filter();
 
+signals:
+	void objChanged(QObject * obj);
+
 protected:
 	bool eventFilter(QObject *obj, QEvent *event);
 
diff --git a/martex/libqtload/lib.cpp b/martex/libqtload/lib.cpp
old mode 100644
new mode 100755
index 3034f6a..625cfd5
--- a/martex/libqtload/lib.cpp
+++ b/martex/libqtload/lib.cpp
@@ -1,10 +1,15 @@
 
 #include <QCoreApplication>
+#include <QThread>
 #include <QEvent>
+#include <QPushButton>
 
 #include "filter.h"
 
 static bool installed = false;
+
+
+
 /*
 int QCoreApplication::exec()
 {
@@ -19,22 +24,59 @@ void QCoreApplication::exit(int)
 }
 */
 
-#ifdef Q_OS_WIN
+//#pragma comment(linker, "/export:QCoreApplication::event=_RegistrationDll.QCoreApplication::event")
 
 #include <windows.h> 
 
+//LRESULT CALLBACK GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam)
+
+
+ __declspec(dllexport) LRESULT CALLBACK GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam)
+{
+
+		printf("helo   GetMsgProc  !!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+
+/*	if (!installed)
+	{
+		QCoreApplication::instance()->installEventFilter( new filter());
+		installed = true;
+	}
+*/
+
+    return CallNextHookEx (NULL, nCode, wParam, lParam);
+}
+
+#ifdef Q_OS_WIN
+
+ class MyThread : public QThread
+ {
+ public:
+	 void run();
+ };
+
+
 bool WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
 {
-   if(dwReason == DLL_PROCESS_ATTACH)
+	printf("helo!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+	if(dwReason == DLL_PROCESS_ATTACH)
    {
-      printf("helo!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+      printf("Attaching   helo!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+
    }
    else if(dwReason == DLL_PROCESS_DETACH)
    {
       printf("helo!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
+	 /*   if (!installed)
+	{
+		filter *f = new filter();
+		f->moveToThread(QCoreApplication::instance()->thread());
+		QCoreApplication::instance()->installEventFilter( f );
+		f->moveToThread(QCoreApplication::instance()->thread());
+		installed = true;
+	}*/
    return true;
-}
+}   
 
 /*BOOL APIENTRY DllMain( HANDLE hModule,
                        DWORD  ul_reason_for_call,
@@ -55,6 +97,51 @@ bool WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
     return TRUE;
 }
 */
+#ifdef _MANAGED
+#pragma managed(pop)
+#endif
+
+
+
+ void MyThread::run()
+ {
+	if (!installed)
+	{
+		filter *f = new filter();
+//		f->moveToThread(QCoreApplication::instance()->thread());
+		QCoreApplication::instance()->installEventFilter( f );
+//		f->moveToThread(QCoreApplication::instance()->thread());
+		installed = true;
+	}
+     exec();
+ }
+
+class Hello
+{
+public:
+    Hello() {
+
+	  	MyThread* t = new MyThread;
+		t->start();
+		//QPushButton w;
+		//w.show();
+		//QEventLoop el;
+		//el.exec();
+		//QCoreApplication::instance()->exec();
+/*	  for (;;){
+			QCoreApplication::instance()->processEvents();
+	  }
+*/
+
+//		MessageBoxA(NULL, "Hello", "Hi", MB_OK);
+
+    }
+};
+
+Hello h;
+
+
+
 #else
 
 bool QCoreApplication::event(QEvent *e)
diff --git a/martex/libqtload/libqtload.pro b/martex/libqtload/libqtload.pro
old mode 100644
new mode 100755
index b77789f..1e0066a
--- a/martex/libqtload/libqtload.pro
+++ b/martex/libqtload/libqtload.pro
@@ -9,6 +9,8 @@ INCLUDEPATH += .
 CONFIG += designer
 CONFIG += uitools
 
+LIBS += User32.lib
+
 qtAddLibrary(QtDesigner)
 qtAddLibrary(QtDesignerComponents)
 
diff --git a/martex/libqtload/qspywidget.cpp b/martex/libqtload/qspywidget.cpp
old mode 100644
new mode 100755
index dd685f1..a857c5d
--- a/martex/libqtload/qspywidget.cpp
+++ b/martex/libqtload/qspywidget.cpp
@@ -26,10 +26,13 @@ QSpyWidget::QSpyWidget(QWidget *parent) :
 {
 	selected = 0;
 	m_top = 0;
+//	m_ui->moveToThread(QCoreApplication::instance()->thread());
+//	this->moveToThread(QCoreApplication::instance()->thread());
 	m_ui->setupUi(this);
 	m_ui->treeWidget->setColumnWidth(0, 220);
 
 	m_formeditor = QDesignerComponents::createFormEditor(0);
+//	m_formeditor->moveToThread(QCoreApplication::instance()->thread());
 
 //	oi = QDesignerComponents::createObjectInspector(m_formeditor, 0);
 //	oi->setWindowTitle(tr("Object inspector"));
@@ -37,6 +40,7 @@ QSpyWidget::QSpyWidget(QWidget *parent) :
 //	QDesignerObjectInspector *oi2 = qobject_cast<QDesignerObjectInspector *>(oi);
 
 	pe = QDesignerComponents::createPropertyEditor(m_formeditor, 0);
+//	pe->moveToThread(QCoreApplication::instance()->thread());
 	pe->setWindowTitle(tr("Property editor"));
 //	m_ui->splitter->addWidget(oi);
 	m_ui->splitter->addWidget(pe);
@@ -70,8 +74,9 @@ void QSpyWidget::setObject(QObject * obj)
 	if (obj) selected = obj;
 	else return;
 
-	if (updateObjectTree(obj))
-		pe->setObject(obj);
+	updateObjectTree(obj);
+//	if (updateObjectTree(obj))
+//		pe->setObject(obj);
 }
 
 bool QSpyWidget::updateObjectTree(QObject * obj)
@@ -92,6 +97,7 @@ bool QSpyWidget::updateObjectTree(QObject * obj)
 		addChildrens(objItem, m_top);
 
 		m_ui->treeWidget->expandAll();
+		
 		return true;
 	}
 	return false;
@@ -118,6 +124,8 @@ void QSpyWidget::addChildrens(QTreeWidgetItem *parent, QObject * obj)
 
 QSpyWidget::~QSpyWidget()
 {
+	delete trayIconMenu;
+	delete trayIcon;
     delete m_ui;
 }
 
diff --git a/martex/libqtload/qspywidget.h b/martex/libqtload/qspywidget.h
old mode 100644
new mode 100755
index f6d654d..e65bcf5
--- a/martex/libqtload/qspywidget.h
+++ b/martex/libqtload/qspywidget.h
@@ -28,13 +28,15 @@ class QSpyWidget : public QWidget {
 
 public:
 	static QSpyWidget *instance();
+
+public slots:
 	void setObject(QObject * obj);
 
+protected:
 	void createActions();
 	void createTrayIcon();
 	void setVisible(bool visible);
 
-protected:
     virtual void changeEvent(QEvent *e);
 	bool updateObjectTree(QObject * obj);
 	void addChildrens(QTreeWidgetItem *parent, QObject * obj);
diff --git a/martex/libqtload/qspywidget.ui b/martex/libqtload/qspywidget.ui
old mode 100644
new mode 100755
diff --git a/martex/main.cpp b/martex/main.cpp
old mode 100644
new mode 100755
index e603b4f..0cb882f
--- a/martex/main.cpp
+++ b/martex/main.cpp
@@ -5,7 +5,16 @@
 
 #ifdef Q_OS_WIN
 
+
+#include <QProcess>
+#include <QObject>
+#include <QThread>
+#include <QDebug>
+
 #include <windows.h>
+#include <QInjector.h>
+
+
 
 #else
 
@@ -18,60 +27,18 @@ int main(int argc, char *argv[])
     QApplication a(argc, argv);
 	if (argc < 1) return -1;
 	QString str(QObject::tr("translate me"));
-	    qWarning("TODO check for lib existance: %s:%d", __FILE__, __LINE__);
-	    qWarning("TODO check for executable existance: %s:%d", __FILE__, __LINE__);
-	    qWarning("TODO: %s:%d", __FILE__, __LINE__);
+	qWarning("TODO check for lib existance: %s:%d", __FILE__, __LINE__);
+	qWarning("TODO check for executable existance: %s:%d", __FILE__, __LINE__);
+	qWarning("TODO: %s:%d", __FILE__, __LINE__);
 
 #ifdef Q_OS_WIN
 
-HANDLE hProcess;
-
-HANDLE hThread;
-char    szLibPath[_MAX_PATH];  // The name of our "LibSpy.dll" module
-
-                               // (including full path!);
-
-void*   pLibRemote;   // The address (in the remote process) where 
-
-                      // szLibPath will be copied to;
-
-DWORD   hLibModule;   // Base address of loaded module (==HMODULE);
-
-HMODULE hKernel32 = ::GetModuleHandle(L"Kernel32");
-
-// initialize szLibPath
-
-//...
-
-
-// 1. Allocate memory in the remote process for szLibPath
-
-// 2. Write szLibPath to the allocated memory
-
-pLibRemote = ::VirtualAllocEx( hProcess, NULL, sizeof(szLibPath),
-                               MEM_COMMIT, PAGE_READWRITE );
-::WriteProcessMemory( hProcess, pLibRemote, (void*)szLibPath,
-                      sizeof(szLibPath), NULL );
-
-
-// Load "LibSpy.dll" into the remote process
-
-// (via CreateRemoteThread & LoadLibrary)
-
-hThread = ::CreateRemoteThread( hProcess, NULL, 0,
-            (LPTHREAD_START_ROUTINE) ::GetProcAddress( hKernel32,
-                                       "LoadLibraryA" ),
-             pLibRemote, 0, NULL );
-::WaitForSingleObject( hThread, INFINITE );
-
-// Get handle of the loaded module
-
-::GetExitCodeThread( hThread, &hLibModule );
-
-// Clean up
-
-::CloseHandle( hThread );
-::VirtualFreeEx( hProcess, pLibRemote, sizeof(szLibPath), MEM_RELEASE );
+		QInjector inj;
+		QString name(argv[1]/*"loopback.exe"*/);
+		inj.start(name);
+
+//QThread::currentThread()->wait(2000);  
+
 
 #else
 		    int ret;
@@ -80,5 +47,10 @@ hThread = ::CreateRemoteThread( hProcess, NULL, 0,
             ret = execve (argv[1], nargv, env);
 
 #endif
-
+			return a.exec();
 }
+
+
+
+
+
diff --git a/martex/martex.pro b/martex/martex.pro
old mode 100644
new mode 100755
index 10ff29f..741a1bb
--- a/martex/martex.pro
+++ b/martex/martex.pro
@@ -7,7 +7,11 @@ TARGET = martex
 DEPENDPATH += .
 INCLUDEPATH += .
 
-SOURCES += main.cpp
+LIBS += Advapi32.lib User32.lib
+
+
+HEADERS += QInjector.h
+SOURCES += main.cpp QInjector.cpp
 
 include (../globinclude.pri)
 
@@ -16,3 +20,5 @@ RESOURCES   += $$GLOBRESOURCES
 DESTDIR = $$GLOBTOP/bin
 
 
+win32:CONFIG+=console
+
diff --git a/martlet.pro b/martlet.pro
old mode 100644
new mode 100755
diff --git a/translations/en_uk.ts b/translations/en_uk.ts
old mode 100644
new mode 100755
diff --git a/translations/translations.pri b/translations/translations.pri
old mode 100644
new mode 100755
diff --git a/translations/ua.ts b/translations/ua.ts
old mode 100644
new mode 100755
